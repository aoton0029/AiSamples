apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-scripts
  namespace: data-services
data:
  backup-redis.sh: |
    #!/bin/bash
    BACKUP_DIR="/backups/redis/$(date +%Y-%m-%d)"
    mkdir -p $BACKUP_DIR
    
    # Redis backup using BGSAVE
    redis-cli -h redis-service -p 6379 BGSAVE
    sleep 10
    
    # Copy RDB file
    kubectl cp data-services/$(kubectl get pod -l app=redis -o jsonpath='{.items[0].metadata.name}'):/data/dump.rdb $BACKUP_DIR/redis-$(date +%H%M%S).rdb
    
    # Compress and upload to storage
    tar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR/
    echo "Redis backup completed: $BACKUP_DIR.tar.gz"
    
  backup-mongodb.sh: |
    #!/bin/bash
    BACKUP_DIR="/backups/mongodb/$(date +%Y-%m-%d)"
    mkdir -p $BACKUP_DIR
    
    # MongoDB dump
    mongodump --host mongodb-service:27017 --username admin --password password --out $BACKUP_DIR
    
    # Compress
    tar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR/
    echo "MongoDB backup completed: $BACKUP_DIR.tar.gz"
    
  backup-neo4j.sh: |
    #!/bin/bash
    BACKUP_DIR="/backups/neo4j/$(date +%Y-%m-%d)"
    mkdir -p $BACKUP_DIR
    
    # Neo4j backup using cypher-shell
    kubectl exec -n data-services $(kubectl get pod -l app=neo4j -o jsonpath='{.items[0].metadata.name}') -- \
      cypher-shell -u neo4j -p password "CALL gds.backup.export('/var/lib/neo4j/backups/backup-$(date +%H%M%S)');"
    
    # Copy backup files
    kubectl cp data-services/$(kubectl get pod -l app=neo4j -o jsonpath='{.items[0].metadata.name}'):/var/lib/neo4j/backups/ $BACKUP_DIR/
    
    tar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR/
    echo "Neo4j backup completed: $BACKUP_DIR.tar.gz"
    
  backup-milvus.sh: |
    #!/bin/bash
    BACKUP_DIR="/backups/milvus/$(date +%Y-%m-%d)"
    mkdir -p $BACKUP_DIR
    
    # Milvus backup using minio
    mc alias set milvus http://minio-service:9000 minioadmin minioadmin
    mc mirror milvus/milvus-bucket $BACKUP_DIR/milvus-data
    
    tar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR/
    echo "Milvus backup completed: $BACKUP_DIR.tar.gz"
    
  restore-all.sh: |
    #!/bin/bash
    RESTORE_DATE=$1
    if [ -z "$RESTORE_DATE" ]; then
      echo "Usage: restore-all.sh YYYY-MM-DD"
      exit 1
    fi
    
    echo "Restoring all databases from $RESTORE_DATE..."
    ./restore-redis.sh $RESTORE_DATE
    ./restore-mongodb.sh $RESTORE_DATE
    ./restore-neo4j.sh $RESTORE_DATE
    ./restore-milvus.sh $RESTORE_DATE
    echo "Restore completed!"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: daily-backup
  namespace: data-services
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: alpine:latest
            command: ["/bin/sh"]
            args:
            - -c
            - |
              apk add --no-cache redis mongodb-tools curl tar
              /scripts/backup-redis.sh
              /scripts/backup-mongodb.sh  
              /scripts/backup-neo4j.sh
              /scripts/backup-milvus.sh
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
            - name: backup-storage
              mountPath: /backups
          volumes:
          - name: backup-scripts
            configMap:
              name: backup-scripts
              defaultMode: 0755
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-pvc
          restartPolicy: OnFailure
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: data-services
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
