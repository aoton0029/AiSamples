# コンテクスト設計（サンプル：顧客サポート自動応答）  

---

## メタ情報
- プロジェクト名: `顧客サポートAssistant`
- バージョン: `1.2`
- 作成日: `2025-09-07`
- 作成者: `開発チーム`

---

## 1. 目的と適用範囲
- 目的: ユーザー問い合わせの自動分類と自動応答文生成により一次対応を自動化し、応答品質と処理速度を向上させる。
- 適用範囲:
  - システム / モジュール: support.bot.service
  - 利用シナリオ: 
    - 新規サポートチケット受信時の自動ラベリング
    - FAQで対応可能な問い合わせへの自動返信作成
    - 高リスク/個人情報含む問い合わせのエスカレーション

---

## 2. ステークホルダー
- プライマリ: カスタマーサポートチーム
- セカンダリ:
  - セールスチーム
  - プロダクトマネージャー
  - 法務/コンプライアンス

---

## 3. コンテクスト概要 (要約)
- コンテクストID: `support_auto_reply_v1`
- 短い説明: ユーザーからの問い合わせを解析してカテゴリ分類と応答文を生成するコンテクスト
- 期待する振る舞い / 成果: 分類精度 >= 85%（F1目標）、自動返信の妥当性と安全性を確保し、必要時にエスカレーションする

---

## 4. データソース / トリガー
- 入力ソース:
  - 名称: Support Ticket System  
    種類: API (REST)  
    更新頻度: リアルタイム  
    信頼度: high  
  - 名称: Knowledge Base  
    種類: ドキュメントDB  
    更新頻度: 日次  
    信頼度: medium  
  - 名称: ユーザープロファイルDB  
    種類: RDB  
    更新頻度: 変更時  
    信頼度: high  
- トリガー条件:
  - 新規チケット作成
  - ユーザーが「自動応答を希望」と選択
  - 再分類リクエスト

---

## 5. エンティティ設計（スキーマ）
- エンティティ名: `Ticket`
  - 説明: サポートチケットを表す主要エンティティ
  - 主キー: `ticket_id`
  - 属性:
    - ticket_id (型: string) - 必須: Yes - 説明: チケット一意識別子
    - user_id (型: string) - 必須: Yes - 説明: ユーザーID
    - subject (型: string) - 必須: Yes - 説明: 件名（短文）
      - 制約:
        - 最大長 256
    - body (型: string) - 必須: Yes - 説明: 問い合わせ本文（任意テキスト）
      - 制約:
        - 最大長 5000
    - created_at (型: datetime) - 必須: Yes - 説明: 受信日時
    - status (型: enum["open","pending","resolved","escalated"]) - 必須: Yes - 説明: チケット状態
    - priority (型: enum["low","medium","high"]) - 必須: No - 説明: 優先度
  - 関連:
    - belongsTo -> User (注: user_id を外部キーとして参照)

---

## 6. 制約と検証ルール
- 全体制約:
  - PII（個人情報）はマスキング/暗号化して保存すること
  - API応答は200ms以内を目標とする（非同期処理は許容）
  - データ保持ポリシーは7年
- 属性レベル検証:
  - ticket_id: 非空、UUID形式
  - subject: 長さ <= 256
  - body: 長さ <= 5000
  - user_id: 存在するユーザーを参照（外部参照チェック）

---

## 7. プロンプト設計（テンプレート）
- ベース説明（システム指示）:
  ```jinja2
  You are a helpful assistant specialized in customer support. Classify the ticket into one of predefined categories and draft a polite, concise reply in Japanese. If the ticket contains PII or legal issues, mark for escalation.
  ```
- 入力プロンプトテンプレート:
  ```jinja2
  背景: サポートチームは即時対応を重要視しています。知識ベースを優先参照して回答案を作成してください。
  タスク: チケットをカテゴリ分類し、自動返信文（日本語）を生成してください。

  入力データ:
  - subject: {{ subject }}
  - body: {{ body }}
  - user_profile: {{ user_profile }}

  出力形式: JSON (category, reply, confidence, escalate_flag)

  制約:
  - reply は 3 文以内、敬語を使用すること
  - 個人情報（氏名、電話番号等）は返信に含めないこと
  - confidence は 0.0〜1.0 の数値で返すこと
  ```
- 出力スキーマ（検査用）:
  ```json
  {
    "type": "object",
    "properties": {
      "category": { "type": "string" },
      "reply": { "type": "string" },
      "confidence": { "type": "number" },
      "escalate_flag": { "type": "boolean" }
    },
    "required": ["category","reply","confidence"]
  }
  ```

---

## 8. 例（テンプレートに値を埋めたサンプル）
- 入力（サンプル）:
  ```jinja2
  {% set subject = "注文の配送遅延について" %}
  {% set body = "先週注文した商品の配送がまだ到着していません。注文番号は123-456です。確認してください。" %}
  {% set user_profile = {"user_id":"u_001","name":"山田","vip":false} %}
  ```
- 期待出力例 (JSON):
  {
    "category": "配送遅延",
    "reply": "ご連絡ありがとうございます。ご注文の配送状況を確認いたします。注文番号を内部で照会し、改めてご連絡いたします。",
    "confidence": 0.92,
    "escalate_flag": false
  }

---

## 9. フォールバック / エラーハンドリング
- デフォルト応答: "申し訳ありませんが現在ご案内できません。担当より追ってご連絡いたします。"
- 再試行ポリシー:
  - 再試行回数: 2
  - 再試行間隔(秒): 3

---

## 10. 更新とライフサイクル管理
- 更新頻度: 月次
- バージョン管理: semantic
- テストカバレッジ要件: >=80%

---

## 11. プライバシーとセキュリティ
- 保護すべき属性: 
  - user_id
  - 氏名
  - 電話番号
  - 住所
- マスキングルール:
  - user.name -> 名前は姓のみに短縮表示（例: 山田 -> 山**）
  - phone -> 最後4桁以外マスク（例: XXX-XXX-1234）
  - order_number -> 保存はハッシュ化

---

## 12. モニタリングと評価指標 (KPI)
- レイテンシ目標: <= 200ms（分類API）
- 正確度指標: カテゴリF1スコア（目標 >= 0.85）
- ログ項目:
  - ticket_id
  - model_version
  - classification
  - confidence
  - response_generated
  - escalate_flag

---

## 13. テストケース（主要）
- ユニット/統合テストの例:
  - id: TC001  
    説明: 配送関連の問い合わせを正しく「配送遅延」に分類する  
    入力: 件名 "配送が届かない", 本文に注文番号を含む  
    期待出力: category == "配送遅延", confidence >= 0.8
  - id: TC002  
    説明: 個人情報（電話番号）を含む問い合わせはエスカレーションフラグを立てる  
    入力: 本文に電話番号を含む  
    期待出力: escalate_flag == true

---

## 14. 導入ガイド（簡易）
1. このテンプレートにプロジェクト固有値をセットする  
2. 受信APIで入力バリデーションを実行（UUID, 長さチェック等）  
3. 分類/生成モデルへ送信（モデルバージョンを指定）  
4. 出力スキーマ検証とPIIマスキング  
5. ログとメトリクスを集約しダッシュボードへ送信

---

## 15. ノートと拡張ポイント
- 拡張: FAQマッチングのスコア閾値を運用で調整するA/Bテストを導入すること。  
- 備考: 重大な法的問い合わせは自動エスカレーションルールを優先する。