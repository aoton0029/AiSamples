name: dev

volumes:
  postgres_storage:
  milvus_storage:
  neo4j_storage:
  redis_storage:
  mongodb_storage:
  n8n_storage:
  ollama_models:

networks:
  demo:
    name: dev_demo

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - N8N_DEFAULT_BINARY_DATA_MODE
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
    - MILVUS_HOST
    - MILVUS_PORT
    - NEO4J_HOST
    - NEO4J_PORT
    - NEO4J_USERNAME
    - NEO4J_PASSWORD
    - REDIS_HOST
    - REDIS_PORT
    - MONGODB_HOST
    - MONGODB_PORT
    - MONGODB_USERNAME
    - MONGODB_PASSWORD
    - MONGODB_DATABASE
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DATABASE}
    - DB_POSTGRESDB_USER=${POSTGRES_USERNAME}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
  env_file:
    - path: .env
      required: true

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_models:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_models:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - path: .env
        required: true
  
  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./volumes/n8n-data/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./volumes/n8n-data/demo-data:/demo-data
      - ./volumes/n8n-data/shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
  
  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama
    container_name: ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    container_name: ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    container_name: ollama-pull-llama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    container_name: ollama-pull-llama
    depends_on:
      - ollama-gpu

  milvus:
    image: milvusdb/milvus:v2.4.4
    container_name: milvus
    environment:
      - MILVUS_MODE=standalone
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_storage:/var/lib/milvus
      - ./volumes/milvus-data/conf:/milvus/configs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  neo4j:
    image: neo4j:5.13-community
    container_name: neo4j
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
    volumes:
      - neo4j_storage:/data
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u ${NEO4J_USERNAME} -p ${NEO4J_PASSWORD} 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - path: .env
        required: true

  redis:
    image: redis:7-alpine
    container_name: redis
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_storage:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
      image: mongo:7
      container_name: mongodb
      networks: ['demo']
      restart: unless-stopped
      ports:
        - "27017:27017"
      environment:
        - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
        - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      volumes:
        - mongodb_storage:/data/db
      healthcheck:
        test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
        interval: 30s
        timeout: 10s
        retries: 3
      env_file:
        - path: .env
          required: true